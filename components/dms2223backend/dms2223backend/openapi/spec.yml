openapi: 3.0.0
info:
  title: DMS backend service REST API
  version: '1.0'
  description: |
    REST API for the backend service.

    This is part of the mandatory exercise.

    For simplicity, [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) is not used
    although it is highly recommended in actual production scenarios.

    Diseño y Mantenimiento del Software.
    Grado en Ingeniería Informática, Universidad de Burgos, 2022-2023.
  contact:
    name: Universidad de Burgos
tags:
  - name: discussion
    description: Operations regarding the questions and answers.
  - name: moderation
    description: Moderation operations.
  - name: questions
    description: Question-related operations.
  - name: answers
    description: Answer-related operations.
  - name: comments
    description: Comment-related operations.
  - name: votes
    description: Vote-related operations.
  - name: reports
    description: Report-related operations.
  - name: server
    description: |
      Operations about the server itself (e.g., server status querying)
servers:
  - url: /api/v1
paths:
  /questions:
    get:
      summary: Gets the existing questions
      description: |
        Queries the storage to fetch the questions.

        Only question stubs are returned. Full information for each question
        should be fetched separately.
      operationId: dms2223backend.presentation.rest.question.list_questions
      responses:
        '200':
          description: A list of questions.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/QuestionsListModel'
              example:
                - qid: 1
                  title: 'Recommended size for the work groups?'
                  timestamp: 1665574089.0
                - qid: 2
                  title: 'Separate report or READMEs?'
                  timestamp: 1665693009.12
      tags:
        - discussion
        - questions
 #     security:
 #       - user_token: []
 #         api_key: []
components:
  schemas:
    QuestionCoreModel:
      type: object
      properties:
        qid:
          type: integer
        title:
          type: string
        timestamp:
          type: number
      required:
        - qid
        - title
        - timestamp
    QuestionStubModel:
      allOf:
        - $ref: '#/components/schemas/QuestionCoreModel'
    QuestionFullModel:
      allOf:
        - $ref: '#/components/schemas/QuestionCoreModel'
        - type: object
          properties:
            body:
              type: string
            owner:
              $ref: '#/components/schemas/UserCoreModel'
          required:
            - body
    QuestionCreationModel:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
      required:
        - title
        - body
    QuestionsListModel:
      type: array
      items:
        $ref: '#/components/schemas/QuestionStubModel'
    UserCoreModel:
      type: object
      properties:
        username:
          type: string
      required:
        - username
    AnswerFullModel:
      type: object
      properties:
        id:
          type: integer
        qid:
          type: integer
        timestamp:
          type: number
        body:
          type: string
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        votes:
          type: integer
          minimum: 0
          default: 0
          nullable: false
        user_votes:
          type: object
          additionalProperties:
            type: boolean
        comments:
          $ref: '#/components/schemas/CommentsListModel'
      required:
        - id
        - qid
        - timestamp
        - body
        - owner
    AnswerCreationModel:
      type: object
      properties:
        body:
          type: string
      required:
        - body
    AnswersListModel:
      type: array
      items:
        $ref: '#/components/schemas/AnswerFullModel'
    CommentFullModel:
      type: object
      properties:
        id:
          type: integer
        aid:
          type: integer
        timestamp:
          type: number
        body:
          type: string
        sentiment:
          type: string
          enum:
            - POSITIVE
            - NEUTRAL
            - NEGATIVE
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        votes:
          type: integer
          minimum: 0
          default: 0
          nullable: false
        user_votes:
          type: object
          additionalProperties:
            type: boolean
      required:
        - id
        - aid
        - timestamp
        - body
        - sentiment
        - owner
    CommentCreationModel:
      type: object
      properties:
        body:
          type: string
        sentiment:
          type: string
          enum:
            - POSITIVE
            - NEUTRAL
            - NEGATIVE
          default: NEUTRAL
      required:
        - body
        - sentiment
    CommentsListModel:
      type: array
      items:
        $ref: '#/components/schemas/CommentFullModel'
    QuestionReportFullModel:
      type: object
      properties:
        id:
          type: integer
        qid:
          type: integer
        reason:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        timestamp:
          type: number
      required:
        - id
        - qid
        - reason
        - status
        - owner
        - timestamp
    QuestionReportCreationModel:
      type: object
      properties:
        reason:
          type: string
      required:
        - reason
    QuestionReportsListModel:
      type: array
      items:
        $ref: '#/components/schemas/QuestionReportFullModel'
    AnswerReportFullModel:
      type: object
      properties:
        id:
          type: integer
        aid:
          type: integer
        reason:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        timestamp:
          type: number
      required:
        - id
        - aid
        - reason
        - status
        - owner
        - timestamp
    AnswerReportCreationModel:
      type: object
      properties:
        reason:
          type: string
      required:
        - reason
    AnswerReportsListModel:
      type: array
      items:
        $ref: '#/components/schemas/AnswerReportFullModel'
    CommentReportFullModel:
      type: object
      properties:
        id:
          type: integer
        cid:
          type: integer
        reason:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        timestamp:
          type: number
      required:
        - id
        - cid
        - reason
        - status
        - owner
        - timestamp
    CommentReportCreationModel:
      type: object
      properties:
        reason:
          type: string
      required:
        - reason
    CommentReportsListModel:
      type: array
      items:
        $ref: '#/components/schemas/CommentReportFullModel'
    ReportStatusChangeModel:
      type: object
      properties:
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
      required:
        - status
    EmptyContentModel:
      type: string
      nullable: true
  parameters:
    QuestionIdPathParam:
      name: qid
      description: Question identifier.
      in: path
      schema:
        type: integer
      required: true
    AnswerIdPathParam:
      name: aid
      description: Answer identifier.
      in: path
      schema:
        type: integer
      required: true
    CommentIdPathParam:
      name: cid
      description: Comment identifier.
      in: path
      schema:
        type: integer
      required: true
    QuestionReportIdPathParam:
      name: qrid
      description: Question report identifier.
      in: path
      schema:
        type: integer
      required: true
    AnswerReportIdPathParam:
      name: arid
      description: Answer report identifier.
      in: path
      schema:
        type: integer
      required: true
    CommentReportIdPathParam:
      name: crid
      description: Comment report identifier.
      in: path
      schema:
        type: integer
      required: true
  responses:
    Empty:
      description: An empty content.
      content:
        'text/plain':
          schema:
            $ref: '#/components/schemas/EmptyContentModel'
          example: ''
    ReportStatusChanged:
      description: Report status successfully changed.
      content:
        'text/plain':
          schema:
            $ref: '#/components/schemas/EmptyContentModel'
          example: ''
    VoteCast:
      description: Vote successfully cast.
      content:
        'text/plain':
          schema:
            $ref: '#/components/schemas/EmptyContentModel'
          example: ''
    VoteAlreadyCast:
      description: Vote already cast.
      content:
        'text/plain':
          schema:
            $ref: '#/components/schemas/EmptyContentModel'
          example: ''

  securitySchemes:
    user_token:
      description: |
        JWS token sent in the `Authorization` header as bearer.

        Contains, among other things, the user doing the requests.

        It is intended to be handed to the authorization service to obtain
        useful information, rather than trying to decode it in the backend.
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: dms2223backend.presentation.rest.security.verify_token
    api_key:
      description: |
        Secret shared between both the requestor and the service.
      type: apiKey
      name: X-ApiKey-Auth
      in: header
      x-apikeyInfoFunc: dms2223backend.presentation.rest.security.verify_api_key
